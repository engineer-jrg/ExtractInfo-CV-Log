/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bancolombia.extractinfo.cv.log;

import com.bancolombia.extractinfo.cv.log.utils.ExecutionInformation;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.maven.model.Model;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

/**
 *
 * @author EQUIPO
 */
public class MainWindow extends javax.swing.JFrame {

    private boolean debug = true;
    private String sysEnv = "dev";
    private ArrayList<String> filePath = new ArrayList<>();
    private ExecutionInformation information = new ExecutionInformation();
    private Model model = null;
    private Map<String, String> logOperationToCapture = new HashMap<>();

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        // inicializaciones
        this.logOperationToCapture.put("OPERATION", "");

        // definir las propiedades de la aplicacion
        this.getPropertiesCLI();

        // imprimir la imformacion de compilacion y ejecucion
        try {
            this.model = this.information.getInfoBuild();
            if (this.model != null) {
                // imprimir informacion de compilacion
                if (this.debug) {
                    this.information.printInfoBuild(this.model);
                    this.information.printInfoProperties(this.sysEnv);
                }
                this.setTitle(this.model.getName() + " - " + this.model.getVersion());
            }
            this.setLocationRelativeTo(null);
            this.information.showMessage("Interfaz iniciada", 1, this.jLabelProcessInfo);
        } catch (IOException ex) {
            this.information.showMessage("Error cargando la informacion de compilacion: " + ex.getMessage(), 2, this.jLabelProcessInfo);
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XmlPullParserException ex) {
            this.information.showMessage("Error cargando la informacion de compilacion: " + ex.getMessage(), 2, this.jLabelProcessInfo);
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelProcessInfo = new javax.swing.JLabel();
        jToolBarMain = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonAddLogs = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListLogs = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonAddLogToList = new javax.swing.JButton();
        jButtonRemoveLog = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonExtarcAllInfoLog = new javax.swing.JButton();
        jButtonExtratInfoLogSelected = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuIcon = new javax.swing.JMenu();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ExtracInfo-CV-Log");
        setBackground(new java.awt.Color(255, 255, 255));

        jLabelProcessInfo.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabelProcessInfo.setForeground(new java.awt.Color(51, 51, 51));
        jLabelProcessInfo.setText(" ");
        jLabelProcessInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jToolBarMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBarMain.setFloatable(false);
        jToolBarMain.setRollover(true);
        jToolBarMain.add(jSeparator1);

        jButtonAddLogs.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jButtonAddLogs.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\add-log-24x24.png")); // NOI18N
        jButtonAddLogs.setToolTipText("Agregar Logs");
        jButtonAddLogs.setFocusable(false);
        jButtonAddLogs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddLogsActionPerformed(evt);
            }
        });
        jToolBarMain.add(jButtonAddLogs);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        jListLogs.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Logs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N
        jListLogs.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jListLogs.setForeground(new java.awt.Color(0, 0, 51));
        jListLogs.setModel(new DefaultListModel());
        jListLogs.setVisibleRowCount(15);
        jScrollPane1.setViewportView(jListLogs);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Carga y Configurac√≥n");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Parametros para analizar los logs");

        jButtonAddLogToList.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\plus-16x16.png")); // NOI18N
        jButtonAddLogToList.setToolTipText("Agregar Logs a la Lista");
        jButtonAddLogToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddLogToListActionPerformed(evt);
            }
        });

        jButtonRemoveLog.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\error-16x16.png")); // NOI18N
        jButtonRemoveLog.setToolTipText("Remover Logs de la Lista");
        jButtonRemoveLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveLogActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel3.setText("Tipo:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Auto", "Aggregation", "Computation", "DataModel", "DataSource", "WorkFlow" }));

        jButtonExtarcAllInfoLog.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\oil-pump-24x24.png")); // NOI18N
        jButtonExtarcAllInfoLog.setText("Extraer Info. Total");
        jButtonExtarcAllInfoLog.setToolTipText("Extraer la Info. de Todos los Logs");
        jButtonExtarcAllInfoLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtarcAllInfoLogActionPerformed(evt);
            }
        });

        jButtonExtratInfoLogSelected.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\oil-pump-16x16.png")); // NOI18N
        jButtonExtratInfoLogSelected.setToolTipText("Extraer Info. del Log Seleccionado");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAddLogToList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRemoveLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExtratInfoLogSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonExtarcAllInfoLog))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonAddLogToList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExtratInfoLogSelected)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonExtarcAllInfoLog)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Lineas", "Operaciones", "Tiempo de ejecuci√≥n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Resultados");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Resultados y operacion con los lo");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuBarMain.setBackground(new java.awt.Color(24, 24, 50));
        jMenuBarMain.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBarMain.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuIcon.setBackground(new java.awt.Color(255, 153, 0));
        jMenuIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\logs-32x32.png")); // NOI18N
        jMenuIcon.setOpaque(true);
        jMenuBarMain.add(jMenuIcon);

        jMenuFile.setBackground(new java.awt.Color(24, 24, 50));
        jMenuFile.setForeground(new java.awt.Color(255, 255, 255));
        jMenuFile.setText("Archivo");
        jMenuFile.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuFile.setOpaque(true);

        jMenuItemExit.setBackground(new java.awt.Color(33, 33, 77));
        jMenuItemExit.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItemExit.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItemExit.setIcon(new javax.swing.ImageIcon("C:\\Users\\EQUIPO\\Documents\\NetBeansProjects\\ExtractInfo-CV-Log\\src\\main\\resources\\icons\\exit-24x24.png")); // NOI18N
        jMenuItemExit.setText("Salir");
        jMenuItemExit.setOpaque(true);
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBarMain.add(jMenuFile);

        jMenuExit.setBackground(new java.awt.Color(24, 24, 50));
        jMenuExit.setForeground(new java.awt.Color(255, 255, 255));
        jMenuExit.setText("Ayuda");
        jMenuExit.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuExit.setOpaque(true);
        jMenuBarMain.add(jMenuExit);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelProcessInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBarMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBarMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProcessInfo))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonAddLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddLogsActionPerformed
        // TODO add your handling code here:
        try {
            File selectedFiles[] = this.getLogsPath();
            if (selectedFiles != null) {
                DefaultListModel dlm = new DefaultListModel();
                this.filePath = new ArrayList<>();
                for (File selectedFile : selectedFiles) {
                    // System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                    dlm.addElement(selectedFile.getName());
                    this.filePath.add(selectedFile.getAbsolutePath());
                }
                this.jListLogs.setModel(dlm);
                this.information.showMessage("Logs cargados", 1, this.jLabelProcessInfo);
            }
        } catch (Exception e) {
            this.information.showMessage("Error cargando los logs: " + e.getMessage(), 2, this.jLabelProcessInfo);
        }
    }//GEN-LAST:event_jButtonAddLogsActionPerformed

    private void jButtonAddLogToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddLogToListActionPerformed
        // TODO add your handling code here:
        try {
            File selectedFiles[] = this.getLogsPath();
            if (selectedFiles != null) {
                DefaultListModel dlm = (DefaultListModel) this.jListLogs.getModel();
                this.filePath = new ArrayList<>();
                for (File selectedFile : selectedFiles) {
                    // System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                    dlm.addElement(selectedFile.getName());
                    this.filePath.add(selectedFile.getAbsolutePath());
                }
                this.jListLogs.setModel(dlm);
                this.information.showMessage("Logs cargados", 1, this.jLabelProcessInfo);
            }
        } catch (Exception e) {
            this.information.showMessage("Error agregando los logs a la lista: " + e.getMessage(), 2, this.jLabelProcessInfo);
        }
    }//GEN-LAST:event_jButtonAddLogToListActionPerformed

    private void jButtonRemoveLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveLogActionPerformed
        // TODO add your handling code here:
        try {
            int selectedLogs[] = this.jListLogs.getSelectedIndices();
            if (selectedLogs.length > 0) {
                DefaultListModel dlm = (DefaultListModel) this.jListLogs.getModel();
                int countRemoveItem = 0;
                for (int selectedLog : selectedLogs) {
                    dlm.removeElementAt(selectedLog - countRemoveItem);
                    this.filePath.remove(selectedLog - countRemoveItem);
                    countRemoveItem++;
                }
                this.jListLogs.setModel(dlm);
                this.information.showMessage("Se removieron los logs seleccionados, # de logs: " + selectedLogs.length, 1, this.jLabelProcessInfo);
            }
        } catch (Exception e) {
            this.information.showMessage("Error removiendo los logs: " + e.getMessage(), 2, this.jLabelProcessInfo);
        }
    }//GEN-LAST:event_jButtonRemoveLogActionPerformed

    private void jButtonExtarcAllInfoLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtarcAllInfoLogActionPerformed
        // TODO add your handling code here:
        this.information.showMessage("Inicio el procesamiento de logs", this.debug);
        for (String logPath : filePath) {
            try {
                this.information.showMessage("Log: " + logPath, this.debug);
                this.processLogs(logPath);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonExtarcAllInfoLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        for (String arg : args) {
            System.out.println(arg);
        }
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                // System.out.println(info.getName());
                // Nimbus
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddLogToList;
    private javax.swing.JButton jButtonAddLogs;
    private javax.swing.JButton jButtonExtarcAllInfoLog;
    private javax.swing.JButton jButtonExtratInfoLogSelected;
    private javax.swing.JButton jButtonRemoveLog;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelProcessInfo;
    private javax.swing.JList<String> jListLogs;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuIcon;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBarMain;
    // End of variables declaration//GEN-END:variables

    /*
    * Obtiene la ruta de los logs y los devuelve en un array de objetos tipo File
    * @return File - Un array de Files con la ruta de los logs.
     */
    private File[] getLogsPath() {
        try {
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Buscar Logs");
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setDialogType(JFileChooser.OPEN_DIALOG);
            fc.setMultiSelectionEnabled(true);
            fc.setFileFilter(new FileNameExtensionFilter("CV logs", "log"));
            if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                return fc.getSelectedFiles();
            }
        } catch (Exception e) {
            this.information.showMessage("Error obteniendo la ruta de los logs: " + e.getMessage(), 2, this.jLabelProcessInfo);
        }
        return null;
    }

    /*
    * Obtiene las propiedades definidas por linea de comandos
    * @return null.
     */
    private void getPropertiesCLI() {
        // definir el ambiente de trabajo para cargar las propiedades del archivo .properties
        if (System.getProperty("appEnv") != null) {
            if (!System.getProperty("appEnv").equals("")) {
                this.sysEnv = System.getProperty("appEnv");
            }
        }
        // definir el debug de la aplicacion
        if (System.getProperty("appDebug") != null) {
            if (System.getProperty("appDebug").equals("true") || System.getProperty("appDebug").equals("false")) {
                this.debug = Boolean.parseBoolean(System.getProperty("appDebug"));
            }
        }
    }

    private String getPattern(String line, String strPattern, String message, String defaultValue) {
        Pattern pattern = Pattern.compile(strPattern);
        Matcher matcher = pattern.matcher(line);
        if (matcher.find()) {
            this.information.showMessage(message + matcher.group(1), this.debug);
            return matcher.group(1);
        } else {
            this.information.showMessage(message + defaultValue, this.debug);
        }
        return defaultValue;
    }

    /*
    
     */
    private void processLogs(String path) throws IOException {
        Files.lines(Paths.get(path)).forEach((line) -> {
            Pattern pattern;
            Matcher matcher;
            // validar si hay operaciones por capturar
            if (this.logOperationToCapture.get("OPERATION").equals("")) {
                // Buscar el inicio del proceso
                if (line.matches(".*Application started:.*")) {
                    this.getPattern(
                            line,
                            ".*(\\d{2,2}-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\\d{4,4} \\d{2,2}:\\d{2,2}:\\d{2,2}.\\d{3,3}).*",
                            "  Tiempo de inicio: ",
                            "dd-MMM-yyyy HH:mm:ss.ms"
                    );
                } else if (line.matches(".*\\stask-type=.*")) {
                    // Buscar tipo de tarea
                    this.getPattern(
                            line,
                            ".*task-type=([A-z]+).*",
                            "  Tipo de objeto: ",
                            "indefinido"
                    );
                } else if (line.matches(".*\\sunderlying-object=.*")) {
                    // Buscar nombre del objeto
                    this.getPattern(
                            line,
                            ".*:(\\w+)\".*",
                            "  Nombre del objeto: ",
                            "indefinido"
                    );
                } else if (line.matches(".*\\sas-of-date=.*")) {
                    // Buscar as-of-date
                    this.getPattern(
                            line,
                            ".*=(\\d{2,2}-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\\d{4,4} \\d{2,2}:\\d{2,2}:\\d{2,2}).*",
                            "  As of date: ",
                            "dd-MMM-yyyy HH:mm:ss"
                    );
                } else if (line.matches(".*parameters: \\w+.*")) {
                    // Buscar los parametros de ejecucion
                    this.getPattern(
                            line,
                            ".*parameters: (.*).*",
                            "  Parametros: ",
                            "indefinido"
                    );
                } else if (line.matches(".*user=.*")) {
                    // Buscar usuario de ejecucion
                    this.getPattern(
                            line,
                            ".*user=(.*).*",
                            "  Usuario: ",
                            "indefinido"
                    );
                } else if (line.matches(".*SQL: : : :.*")) {
                    // Buscar la ejecuciones SQL
                    if (this.logOperationToCapture.get("OPERATION") == "") {
                        this.logOperationToCapture.put("OPERATION", "SQL");
                        this.information.showMessage("  Operacion: " + this.logOperationToCapture.get("OPERATION"), this.debug);
                        this.getPattern(
                                line,
                                ".*(\\d{2,2}-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\\d{4,4} \\d{2,2}:\\d{2,2}:\\d{2,2}.\\d{3,3}).*",
                                "      Tiempo de inicio: ",
                                "dd-MMM-yyyy HH:mm:ss.ms"
                        );
                    }
                }

            } else if (this.logOperationToCapture.get("OPERATION").equals("SQL")) {
                // captura informacion de las operaciones sql

                // Buscar el tipo de operacion sql
                if (line.matches(".*\\sOperation = .*")) {
                    this.getPattern(
                            line,
                            ".*Operation = ([A-z]+).*",
                            "      Tipo de operacion SQL: ",
                            "indefinido"
                    );
                } else if (line.matches(".*\\sSQL statement: .*")) {
                    this.getPattern(
                            line,
                            ".*SQL statement: (.*).*",
                            "      Declaracion SQL: ",
                            "indefinido"
                    );
                } else if (line.matches(".*SQL: : : : Rollback.*")) {
                    // Buscar la ejecuciones SQL
                    this.getPattern(
                            line,
                            ".*(\\d{2,2}-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\\d{4,4} \\d{2,2}:\\d{2,2}:\\d{2,2}.\\d{3,3}).*",
                            "       Tiempo de fin: ",
                            "dd-MMM-yyyy HH:mm:ss.ms"
                    );
                    if (this.logOperationToCapture.get("OPERATION") == "SQL") {
                        this.logOperationToCapture.put("OPERATION", "");
                    }
                } else if (!line.matches(".*\\sConnection = .*") && !line.matches(".*\\sSQL trace:.*") 
                        && !line.equals("") && !line.matches(".*\\sConnection = .*")) {
                   this.information.showMessage("           " + line, this.debug);
                }
            }
        });
    }
}
